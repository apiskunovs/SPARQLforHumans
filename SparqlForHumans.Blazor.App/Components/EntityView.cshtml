@using Newtonsoft.Json
@using SparqlForHumans.Blazor.App.Models
@using SparqlForHumans.Lucene.Extensions
@using SparqlForHumans.Lucene.Queries
@using SparqlForHumans.Lucene.Services
@using SparqlForHumans.Models
@inherits EntityBase

<div class="shadow card m-3 " style="width: 400px">
    <h5 class="card-header">@(SelectedEntity == null ? "Entity" : SelectedEntity.Label)</h5>
    <div class="card-body">
        @*SearchBox*@
        <div>
            <AutoCompleteView AutocompleteSourceProvider="@RunQuery"
                              Delay="300"
                              MinimumLength="1"
                              OnSelectionChanged="@SelectionChanged"
                              PlaceHolder="Search" />
        </div>

        @if (SelectedEntity != null)
        {
            @*Entity*@
            <h5 class="card-title mt-2">(@SelectedEntity.Id) @SelectedEntity.Label</h5>
            <h6 class="card-subtitle mb-2 text-muted">@SelectedEntity.Description</h6>

            @*Properties*@
            <div class="accordion border">
                <div class="card">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne">
                        Properties
                    </button>

                    <div id="collapseOne" class="collapse">
                        <ul class="list-group" style="max-height: 300px; overflow: auto;">
                            @foreach (var property in SelectedEntity.Properties.DistinctBy(x => x.Id).OrderBy(x => x.Frequency))
                            {
                                <li class="list-group-item list-group-item-action">
                                    <button onclick="@(e => OnPropertyClick(property))" style="all: unset">
                                        (@property.Id) - @property.Label
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>

            @*<div class="card">
                Selected Properties:
                <div>
                    <ul class="list-group" style="max-height: 300px; overflow: auto;">
                        @foreach (var property in SelectedEntity.Properties.Where(x => ((SelectableProperty) x).IsSelected).DistinctBy(x => x.Id))
                        {
                            <li class="list-group-item list-group-item-action">
                                (@property.Id) - @property.Label
                            </li>
                        }
                    </ul>
                </div>
            </div>*@
        }
    </div>
</div>

@functions {

    public void SelectionChanged(Entity selectedEntity)
    {
        var settings = new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.All
        };
        SelectedEntity = selectedEntity;
        //SelectedEntity = JsonConvert.DeserializeObject<Entity>(selectedEntity, settings);
        SelectedEntity.AddProperties();
        StateHasChanged();
    }

    public void OnPropertyClick(IProperty property)
    {
        if (property.GetType() != typeof(SelectableProperty)) return;
        var properties = SelectedEntity.Properties.Where(x => x.Id.Equals(property.Id));
        foreach (var selectedProperty in properties)
        {

            ((SelectableProperty)selectedProperty).IsSelected = !((SelectableProperty)selectedProperty).IsSelected;
        }
    }

    //public IEnumerable<SelectableValue> RunQuery(string query)
    //{
    //    return MultiDocumentQueries.QueryEntitiesByLabel(query, false)?
    //        .Select(x => new SelectableValue() { Label = x.Label, Value = x });
    //}

    public Task<Entity[]> RunQuery(string query)
    {
        return Task.FromResult(MultiDocumentQueries.QueryEntitiesByLabel(query, false)?.ToArray());
    }

    public Entity SelectedEntity { get; set; }
}