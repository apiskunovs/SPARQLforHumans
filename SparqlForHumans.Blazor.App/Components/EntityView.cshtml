@using Newtonsoft.Json
@using SparqlForHumans.Blazor.App.Models
@using SparqlForHumans.Lucene.Extensions
@using SparqlForHumans.Lucene.Queries
@using SparqlForHumans.Models
@using SparqlForHumans.Models.RDFQuery
@using SparqlForHumans.RDF.Queries
@inherits EntityBase

<div class="shadow card m-3 " style="width: 400px">
    <h5 class="card-header">@(SelectedEntity == null ? "Entity" : SelectedEntity.Label)</h5>
    <div class="card-body">
        @*SearchBox*@
        <div>
            <AutoCompleteView AutocompleteSourceProvider="@RunQuery"
                              Delay="300"
                              MinimumLength="1"
                              OnSelectionChanged="@SelectionChanged"
                              PlaceHolder="Search" />
        </div>

        @if (SelectedEntity != null)
        {
            @*Entity*@
            <h5 class="card-title mt-2">(@SelectedEntity.Id) @SelectedEntity.Label</h5>
            <h6 class="card-subtitle mb-2 text-muted">@SelectedEntity.Description</h6>

            @*Properties*@
            <div class="accordion border">
                <div class="card">
                    <button class="btn btn-link card-header" data-toggle="collapse" data-target="#collapseOne">
                        Selected Properties: @SelectedEntity.Properties.Count(x => ((SelectableProperty)x).IsSelected)
                    </button>

                    <div id="collapseOne" class="collapse">
                        <ul class="list-group" style="max-height: 300px; overflow: auto;">
                            @foreach (var property in SelectedEntity.Properties)
                            {
                                <li class="list-group-item list-group-item-action @($"{(((SelectableProperty)property).IsSelected ? "active" : null)}")" onclick="@(e => OnPropertyClick((SelectableProperty)property))">
                                    (@property.Id) - @property.Label
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {

    private SelectableEntity _selectedEntity;

    private List<QueryTriple> queryTriples { get; set; } = new List<QueryTriple>();

    public void SelectionChanged(object selectedJSONObject)
    {
        var settings = new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.All
        };

        SelectedEntity = JsonConvert.DeserializeObject<SelectableEntity>(selectedJSONObject.ToString(), settings);
        SelectedEntity.AddProperties();
        StateHasChanged();
    }

    public void OnPropertyClick(SelectableProperty property)
    {

        property.IsSelected = !property.IsSelected;

        if (property.IsSelected)
        {
            var queryTriple = new QueryTriple()
            {
                Subject = new RDFEntity(SelectedEntity),
                Predicate = new RDFProperty(property),
                Object = new RDFLabel() {Label = property.Label.ToLower()},
            };
            Console.WriteLine(queryTriple.BuildQuery());

            queryTriples.Add(queryTriple);
        }
        else
        {
            queryTriples.RemoveAll(x => x.Predicate.Id.Equals(property.Id));
        }

    }

    public Task<SelectableValue[]> RunQuery(string query)
    {
        return Task.FromResult(MultiDocumentQueries.QueryEntitiesByLabel(query)
            .Select(x => new SelectableValue() { Label = x.Label, Value = x }).ToArray());
    }

    public SelectableEntity SelectedEntity
    {
        get => _selectedEntity;
        set
        {
            _selectedEntity = value;
            _selectedEntity.Properties = _selectedEntity.Properties.DistinctBy(x => x.Id).OrderBy(x => x.Frequency);
        }
    }

}