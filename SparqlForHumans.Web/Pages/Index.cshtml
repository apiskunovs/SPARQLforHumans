@page "/"
@page "/sparqlforhumans"
@using System.Runtime.InteropServices.ComTypes
@using SparqlForHumans.Models

<h1>Sparql for humans</h1>

<EntityComponent></EntityComponent>

@*<div>
    <h1>Query</h1>
    <input placeholder="Search" autofocus autocomplete="on" data-autocomplete="@results" oninput="(this.dispatchEvent(new CustomEvent('change', { bubbles: true })))" bind="@TestValue" />

    <select class="form-control">
        @if (results != null)
        {
            foreach (var result in results)
            {
                <option value="@result">@result</option>
            }
        }
    </select>
</div>

@functions
{
string _testValue;

string TestValue
{
    get { return _testValue; }
    set
    {
        _testValue = value;
        results = collection.Where(x => x.Contains(TestValue.ToUpper())).Take(20).ToList();
    }
}

List<string> collection = new List<string>();
List<string> results = new List<string>();

protected override void OnAfterRender()
{
    base.OnAfterRender();
    fillList();
}

Random random = new Random();

string RandomString(int length)
{
    const string chars = "ABCDEFGIJKLMNOPQRSTUV";
    return new string(Enumerable.Repeat(chars, length)
        .Select(s => s[random.Next(s.Length)]).ToArray());
}

void fillList()
{
    var min = 4;
    var max = 10;
    var count = 500;
    var r = new Random();
    int rInt = r.Next(min, max);

    for (int i = 0; i < count; i++)
    {
        collection.Add(RandomString(rInt));
    }
}

}*@

@*<div>
            <h1>Sparql for humans</h1>
            <input type="text" />
            <button onclick="@addEntity">Add</button>
            <button onclick="@removeEntity">Remove</button>

            @if (entities != null)
            {
                foreach (var entity in entities)
                {
                    <EntityView Header="@entity.Id" />
                }
            }

        </div>

        <div class="ui-widget">
            <h1>Auto complete</h1>
            <label for="tags">Tags: </label>
            <input id="tags">
        </div>

    @functions
    {
    Entity[] entities = new Entity[0];
    int i = 0;
    void addEntity()
    {
        entities = entities.Append(new Entity()
        {
            Id = i++.ToString(),
        }).ToArray();
    }

    void removeEntity()
    {
        entities = entities.ToList().Take(entities.Length - 1).ToArray();
    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();
        JSRuntime.Current.InvokeAsync<bool>("JSMethod");
    }
    }

*@